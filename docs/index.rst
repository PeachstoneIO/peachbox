.. peachbox documentation master file, created by
   sphinx-quickstart on Fri Apr 17 13:18:43 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Peachbox' internal documentation
********************************

Welcome to peachbox's documentation!
====================================
This is the internal documentation for peachbox

Getting Started
===============

Create a new Peachbox app with:

``python -c 'import peachbox.gen; peachbox.gen.app.create_app("MyApp")'``

Define your models in ``setup/models.py``
Define your pipelines in ``pipelines``. See example code in pipeline integration test.



About this documentation
========================
This documenation is generated by `Sphinx <http://sphinx-doc.org/>`_.

To create or update the documeantation, run ``./update.py`` in the directory ``peachbox/docs``.

Some starting documentation about Sphinx and the employed .rst encoding (reStructuredText) can be found at 
https://pythonhosted.org/an_example_pypi_project/sphinx.html, http://sphinx-doc.org/rest.html#rst-primer and http://docutils.sourceforge.net/docs/user/rst/quickref.html .

For code documenatation, the generated docs are derived from docstrings embedded in the code.
For conventions see https://www.python.org/dev/peps/pep-0257/.


Employed packages
=================
Peachbox uses several open source packages, mostly distrubted under the Apache license (https://www.apache.org/licenses/).

Sphinx
------
A (python) documentation generator. Also used to generate this documentation.
More details see: http://sphinx-doc.org/.

Apache Kafka
------------
Apache Kafka (http://kafka.apache.org/) is a scalable high-throughput distributed messaging system. It handles i/o of single events.
Messages are persisted on disk and replicated within the cluster to prevent data loss. Each broker can handle terabytes of messages without performance impact. 
Kafka has a modern cluster-centric design that offers strong durability and fault-tolerance guarantees. 

Cassandra
---------
Apache Cassandra (http://cassandra.apache.org/) is an open source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. Cassandra offers robust support for clusters spanning multiple datacenters, with asynchronous masterless replication allowing low latency operations for all clients.
Tables may be created, dropped, and altered at runtime without blocking updates and queries.
Apache Cassandra was initially developed at Facebook.
Cassandra supports integrated caching and Apache Hadoop MapReduce (https://hadoop.apache.org/).

git and github
----------
git (https://git-scm.com/) is used to as code repository and version control system. The git repository itsself is located at github (https://github.com/). The usage of github requires an account at github.com.

Update repository::

  $ git pull

Commit changes locally::

  $ git commit -am "message for all files"

Push changes into github repository::
  
  $ git push


Apache Spark
------------
Apache Spark (https://spark.apache.org/) is a fast and general engine for big data processing, with built-in modules for streaming, SQL, machine learning and graph processing. It is up to 100 times faster than Hadoop MapReduce (https://hadoop.apache.org/)  when running in memory and still 10 times faster when running on disk.

Apache Spark requires java, Scala and python.

Apache zookeeper
----------------
ZooKeeper (https://zookeeper.apache.org/) is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.

Docker
------
Docker (https://www.docker.com/) is an open platform for developers and sysadmins of distributed applications. Within peachbox it is used to provide a single all-in one environment for running and developing peachbox. 

Docker: useful commands
+++++++++++++++++++++++
Start docker environment from the peachbox main directory::

  $ docker run -i -p 8888:8888  -p 12322:22 -v $PWD:/peachbox -t peachstone/dev /bin/bash


Get (pull) recent peachstone image: 

.. code-block:: bash

 $ docker pull peachstone/dev


(Local) commit to docker image:

.. code-block:: bash

 $ docker commit ConstainerID


Push docker image to repository (username, password and eMail required)::

 $ docker push


Obtain ContainerID::

 $ docker ps -l

Display container details::

 $ docker inspect <ContainerID>

To connect via ssh to a running docker session, type:

.. code-block:: bash

 $ ssh root@localhost -p 12322
 
Type password ``root``.
If connection is refused, the ssh client has to be restarted in docker using ``$ service ssh start``.



Version history
===============

* 0.0 first version
* 0.1 second version

References
==========

Collection of peachbox material (presentations, etc.)
-----------------------------------------------------


Background information
----------------------
Some books are available on google drive: Ask Philipp.




Peachbox' external documentation
********************************
Welcome to peachbox' official user documentation. The official homepage of peachbox is available at http://peachstone.io/ .


Tutorial 1
==========
Go to the peachbox directory (if `$PEACHBOX` is set) and start docker environment from the peachbox main directory::

  $ cd $PEACHBOX
  $ ./docker/run_docker.sh

This runs a docker session with ``$ docker run -i -p 8888:8888 -v $PWD:/peachbox -t peachstone/dev /bin/bash`` and opens a bash terminal.

Within the docker terminal, start the `cassandra`, `zookeeper` and `kafka` servers::
  
  $ /usr/local/cassandra/bin/cassandra
  $ /usr/local/kafka/bin/zookeeper-server-start.sh $PEACHBOX/services/zookeeper.properties &
  $ /usr/local/kafka/bin/kafka-server-start.sh $PEACHBOX/services/server.properties &

These commands are also available as ``$ source $PEACHBOX/tutorial/start_services.sh``. 

It may be convenient to have multiple shells available within docker. Thus run::

  $ tmux

When typing ``Ctrl+b c``, a new `tab` is opened. Change between tabs with ``Ctrl+b n``.
The bottom line indicates which shell is activated.


We now want to emulate a continous data flow, where two reviews are submitted (to kafka) per second.
The data of the movie reviews is stored in ``$PEACHBOX/tutorial/data/sorted_reviews_100000.json``. Type::
  $ cd $PEACHBOX/tutorial/data
  $ ./simple_kafka_producer.py

This small script then reads the reviews and passes two reviews to kafka every second. 
The data file contains entries of the form (`$ head -3 sorted_reviews_100000.json`)::

  {"user_id":"A37I5QIHD9UMPD","product_id":"6302967538","review":"&quot;The Cruel Sea&quot; gives an excellent account of the real war at sea, the everyday lives of sailors and the situations they were up against both at sea and at home.  The reader feels the fear, the anguish, the camaradarie of the crew.<br \/><p> There is no glamour in war, there is the ordinary man doing his best to win the battle and when it is won, to go home to continue with his life","summary":"The everyday man at war","profile_name":"dmunns@yancey.main.nc.us","helpfulness":"2\/2","time":872035200,"score":5.0}
  {"user_id":"A37I5QIHD9UMPD","product_id":"B00004CILW","review":"&quot;The Cruel Sea&quot; gives an excellent account of the real war at sea, the everyday lives of sailors and the situations they were up against both at sea and at home.  The reader feels the fear, the anguish, the camaradarie of the crew.<br \/><p> There is no glamour in war, there is the ordinary man doing his best to win the battle and when it is won, to go home to continue with his life","summary":"The everyday man at war","profile_name":"dmunns@yancey.main.nc.us","helpfulness":"2\/2","time":872035200,"score":5.0}
  {"user_id":"A37I5QIHD9UMPD","product_id":"B00008V6YR","review":"&quot;The Cruel Sea&quot; gives an excellent account of the real war at sea, the everyday lives of sailors and the situations they were up against both at sea and at home.  The reader feels the fear, the anguish, the camaradarie of the crew.<br \/><p> There is no glamour in war, there is the ordinary man doing his best to win the battle and when it is won, to go home to continue with his life","summary":"The everyday man at war","profile_name":"dmunns@yancey.main.nc.us","helpfulness":"2\/2","time":872035200,"score":5.0}
  {"user_id":"A37I5QIHD9UMPD","product_id":"6302763770","review":"&quot;The Cruel Sea&quot; gives an excellent account of the real war at sea, the everyday lives of sailors and the situations they were up against both at sea and at home.  The reader feels the fear, the anguish, the camaradarie of the crew.<br \/><p> There is no glamour in war, there is the ordinary man doing his best to win the battle and when it is won, to go home to continue with his life","summary":"The everyday man at war","profile_name":"dmunns@yancey.main.nc.us","helpfulness":"2\/2","time":872035200,"score":5.0}
  {"user_id":"A2XBTS97FERY2Q","product_id":"B004J1A72C","review":"This is a wide ranging musical comedy done in the style of post-depression era musicals, including brilliant performances from Steve Martin, Bernadette Peters, and Christopher Walken.  One might take the movie literally as a love story, but upon further consideration we see that it's actually a movie dedicated to the upbeat songs and movies of days long gone by.  I recommend movie highly as it is sometimes boisterous, and other times delicately romantic, but all the while very entertaining.  @see-also &quot;Radio Days&quot; END","summary":"A clever take on an old genre","profile_name":"ron@6dos.com","helpfulness":"6\/7","time":872294400,"score":5.0}

The `simple_kafka_produces` passes each row to the topic `movie_reviews` to kafka.



How-to define a new model master
================================




API
***

.. toctree::
   :maxdepth: 3

   peachbox


Indices and tables
******************

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

